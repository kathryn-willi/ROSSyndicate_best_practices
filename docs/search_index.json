[["publishing-repositories.html", "Section 8 Publishing Repositories 8.1 Creating a Zenodo account 8.2 Preparing to publish 8.3 Linking a repository to Zenodo 8.4 Completing the metadata information", " Section 8 Publishing Repositories When delivering code or repositories to our stakeholders or other researchers, it needs to be citable. A citable repository has a stable DOI (digital object identifier) and complete metadata. We use the GitHub integration in Zenodo to publish repositories. When set up correctly, a GitHub ‘release’ will push all code to Zenodo automatically. All future ‘releases’ will be associated with the original DOI as well as a new DOI specific to that release. In general, the GitHub -&gt; Zenodo pathway is best for software (code) and not necessarily for data. Data publishing should be completed at EDI, CUAHSI, or FigShare. Derived data is okay in the GitHub -&gt; Zenodo pathway, just remember, this pathway is meant to be for CODE and SOFTWARE, not necessarily for data (though you can publish data to Zenodo). As mentioned before, we only publish repositories that have been consistently reviewed internally. Ideally your repository has been reviewed by an external collaborator or by another ROSSyndicate member. Remember, by pushing this repository to Zenodo, you are creating a PERMANENT archive of its contents, for better or worse. 8.1 Creating a Zenodo account The easiest way to create a Zenodo account is to do so with your GitHub credentials. You will need to link these two accounts in order to fully take advantage of the GitHub/Zenodo integration. 8.2 Preparing to publish In order to have a meaningful repository release, you need to provide some metadata to Zenodo. While there are no requirements for publishing to Zenodo, it is a best practice to include robust metadata alongside your code release. A metadata template can be found in the helpful_docs folder of this repository. Once you’ve compiled this information, send it to Katie Willi or Anika Pyle for proofreading. 8.2.1 Release Title You can use the repository name, but that’s not going to be helpful for anyone except you! Someone reading the Release Title should be able to discern what the repository does. You can explain the ‘how’ in the description. 8.2.2 Author list Prepare your author list by looking at the contributors to the repo. All contributors to the repo should be listed as an author. You will need each author’s full name, institution, and their ORCID. 8.2.3 Description This is the big lift in creating the metadata. Consider this similar to the introduction/background and methods section of a scientific paper. In the description of your repository, add information about the following things: General code description - the ‘how’ of your repository Methodology (summary only) - specifically if there are multiple steps to an analysis it is helpful to provide a methodology. If the repository hosts a very complicated analysis, consider only a condensed version of methods here, but add a markdown document with the complete methodology in your repository. If you are including data: data lineage (aka, where the data came from) explanation of how the data have been manipulated if they are derived (this is related to methods, so use your best judgement). If the analysis is specific to a certain locale, state and describe the locale. Maintenance and maintenance interval. ‘Ongoing’ or ‘completed’. If ‘ongoing’, state the approximate interval that the repository will be updated. If this is an update to a previous release, state the changes from the previous version. Generally speaking, much of this information should already exist in your repository README or Methods document and cutting/pasting is absolutely okay. This section may be lengthy and that is okay! 8.2.4 Version For one-time releases (like preparing a repository for a paper), using a version-number is perfect (i.e. v1, v2, etc). For repositories that are updated frequently, consider using a version-year-number (i.e. v2022-1, v2023-1, v2023-2, etc). 8.2.5 Keywords Generally speaking, keywords help others find your code or research. It is not required. Keywords should be meaningful and specific and can include places, methods, etc. It is common to use controlled vocabulary for keywords, like the LTER controlled vocabulary for ecology research. 8.2.6 License All repositories that are published are considered open access. Because our repository best practices include using an MIT use license, the LICENSE.txt file will override this option. 8.2.7 Funding If there is applicable funding sources for this repository, you should list them. You will need the funder name and the grant number. No other fields are required. 8.3 Linking a repository to Zenodo To activate the GitHub/Zenodo integration for a given repository, navigate to the GitHub account page by clicking the dropdown menu in the top right of the window. From here, you simply follow the directions! 8.4 Completing the metadata information To complete the entry of your metadata information and formalize the publishing of your repository, you’ll need to edit the Zenodo upload. Do this by navigating to the ‘Upload’ section of Zenodo (by clicking ‘Upload’ at the top of the Zenodo site). Here, you can click on the released repository: And then click the ‘Edit’ button: Here, you can enter in all information from your Zenodo metadata document. When you’re ready, press ‘Save’ and then ‘Publish’. 8.4.1 Add the DOI badge to your repository Now that you’ve minted a sweet sweet DOI for your repository, you should go ahead and add the DOI badge to your repository’s README file. On the right hand side of your Zenodo release landing page (formatted as ’https://zenodo.org/record/*DOInumber*’ on your browser), click on the DOI badge: This will pop up a number of embedding formats. Copy and paste the one for ‘Markdown’. At this point, go to the GitHub repository and add the badge at the top of the primary README file within the GitHub user interface on the web. This addition to the repository does not need to be reviewed. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
